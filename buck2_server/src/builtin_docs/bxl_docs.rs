/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under both the MIT license found in the
 * LICENSE-MIT file in the root directory of this source tree and the Apache
 * License, Version 2.0 found in the LICENSE-APACHE file in the root directory
 * of this source tree.
 */

use std::collections::HashMap;
use std::collections::HashSet;
use std::sync::Arc;

use buck2_core::cells::CellAliasResolver;
use buck2_interpreter::interpreter::GlobalInterpreterState;
use buck2_interpreter::interpreter::InterpreterConfigForCell;
use maplit::hashmap;
use once_cell::sync::Lazy;
use starlark::docs::Doc;
use starlark::docs::DocItem;
use starlark::docs::Member;
use starlark::docs::Object;

use crate::builtin_docs::docs::builtin_doc;

// Map of global BXL function name to directory name.
// (@wendyy) I don't think this is a nice implementation, but this offers us finer
// grain control over documentation generated by globals. Let's at least get the
// documentation out there before coming up with a cleaner solution
static BXL_GLOBAL_METHODS_MAPPING: Lazy<HashMap<&str, &str>> = Lazy::new(|| {
    hashmap![
        "sub_target" =>  "Target Label",
        "configured_sub_target" =>  "Target Label",
        "target_set" =>  "Target Set",
        "get_path_without_materialization" =>  "Artifact",
    ]
});

static BXL_GLOBAL_METHOD_NAME_SET: Lazy<HashSet<&str>> =
    Lazy::new(|| BXL_GLOBAL_METHODS_MAPPING.keys().copied().collect());

// Globals that are in BXL. For BXL, we will probably only have global functions (as opposed
// to objects and properties).
pub(crate) fn get_builtin_bxl_docs(
    cell_alias_resolver: CellAliasResolver,
    interpreter_state: Arc<GlobalInterpreterState>,
) -> anyhow::Result<Vec<Doc>> {
    let interpreter_config = InterpreterConfigForCell::new(cell_alias_resolver, interpreter_state)?;
    match interpreter_config.bxl_file_global_env().documentation() {
        DocItem::Object(b_o) => {
            let mut docs = vec![];
            for member in b_o.members {
                if BXL_GLOBAL_METHOD_NAME_SET.contains(member.0.as_str()) {
                    match member.1 {
                        Member::Function(function) => {
                            // Convert the function to its own object so it gets its own markdown file name.
                            // Otherwise, it will be named `native.md`, which is confusing in static docs.
                            let doc_item = DocItem::Object(Object {
                                docs: None,
                                members: vec![(member.0.clone(), Member::Function(function))],
                            });

                            docs.push(builtin_doc(
                                member.0.as_str(),
                                &format!(
                                    "BXL/{} Globals",
                                    BXL_GLOBAL_METHODS_MAPPING.get(member.0.as_str()).unwrap()
                                ),
                                doc_item,
                            ));
                        }
                        _ => (),
                    }
                }
            }

            Ok(docs)
        }
        _ => Ok(Vec::new()),
    }
}
